<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>

    <!-- Set this to true if you enable server-side prerendering -->
    <BuildServerSideRenderer>false</BuildServerSideRenderer>
    <UserSecretsId>0a36ee25-33be-418b-9a66-b0db81b88575</UserSecretsId>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>..\..</DockerfileContext>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\netcoreapp2.1\SestWeb.Api.xml</DocumentationFile>
    <OutputPath>bin\Debug\netcoreapp2.1\</OutputPath>
    <NoWarn>1701;1702;1591</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\Release\netcoreapp2.1\SestWeb.Api.xml</DocumentationFile>
    <OutputPath>bin\Release\netcoreapp2.1\</OutputPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AspNetCore.Identity.Mongo" Version="3.1.5" />
    <PackageReference Include="Autofac.Configuration" Version="5.0.0" />
    <PackageReference Include="Autofac.Extensions.DependencyInjection" Version="6.0.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="8.6.2" />
    <PackageReference Include="MicroElements.Swashbuckle.FluentValidation" Version="2.3.0" />
    <PackageReference Include="Microsoft.AspNetCore.App" />
    <PackageReference Include="Microsoft.AspNetCore.Razor.Design" Version="2.1.2" PrivateAssets="All" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="2.1.1" />
    <PackageReference Include="Microsoft.VisualStudio.Azure.Containers.Tools.Targets" Version="1.22.1-Preview.1" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.1.9" />
    <PackageReference Include="Serilog" Version="2.9.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="3.2.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="4.1.0" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="4.0.1" />
  </ItemGroup>
  
  <ItemGroup>
    <None Update="autofac.Development.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Content Remove="$(SpaRoot)**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\SestWeb.Application\SestWeb.Application.csproj" />
    <ProjectReference Include="..\SestWeb.Infra\SestWeb.Infra.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="UseCases\Importação\ImportarTempoReal\" />
    <Folder Include="UseCases\PoçoWeb\DeleteFile\" />
    <Folder Include="UseCases\PoçoWeb\DeleteOilField\" />
    <Folder Include="UseCases\PoçoWeb\DeleteOpUnit\" />
    <Folder Include="UseCases\PoçoWeb\DeleteWell\" />
    <Folder Include="UseCases\PoçoWeb\GetFile\" />
    <Folder Include="UseCases\PoçoWeb\GetOilFields\" />
    <Folder Include="UseCases\PoçoWeb\GetOilField\" />
    <Folder Include="UseCases\PoçoWeb\GetOpUnits\" />
    <Folder Include="UseCases\PoçoWeb\GetOpUnit\" />
    <Folder Include="UseCases\PoçoWeb\GetWells\" />
    <Folder Include="UseCases\PoçoWeb\GetWell\" />
    <Folder Include="UseCases\PoçoWeb\UpdateFile\" />
    <Folder Include="UseCases\PoçoWeb\UpdateOilField\" />
    <Folder Include="UseCases\PoçoWeb\UpdateOpUnit\" />
    <Folder Include="UseCases\PoçoWeb\UpdateWell\" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="web.config">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod" Condition=" '$(EnvironmentName)' != 'Staging' " />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build-staging" Condition=" '$(EnvironmentName)' == 'Staging' " />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <DistFiles Include="$(SpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
