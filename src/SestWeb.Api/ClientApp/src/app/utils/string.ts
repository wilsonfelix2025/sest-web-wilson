export class StringUtils {
    /**
     * The default method to use when normalizing strings.
     *
     * Accepted values are NFD, NFC, NFKC and NFKD, but if your didn't know that,
     * you probably shouldn't change the line below.
     */
    static readonly NORMALIZATION_FORM: string = 'NFD';

    /**
     * The regular expression that comprises every unicode accent.
     */
    static readonly UNICODE_ACCENTS_REGEX: RegExp = /[\u0300-\u036f]/g;

    /**
     * The regular expression that matches multiple spaces.
     */
    static readonly MULTISPACE_REGEX: RegExp = /\s\s+/g;

    /**
     * The regular expression which maps to a sequence of consecutive non-word
     * characters.
     *
     * Non-word characters are characters not pertaining to the A-Z, a-z and 0-9 set.
     */
    static readonly NON_WORD_CHARACTERS_REGEX: RegExp = /[\s\W-]+/g;

    /**
     * Dictionary which maps a unicode character to an ASCII character.
     *
     * The key is the unicode character and the value is the ASCII character.
     */
    static readonly UNICODE_ASCII_MAP = {
        'ß': 's',
        'œ': 'o',
        'æ': 'a'
    };

    /**
     * Transforms a string into a slug.
     *
     * A slug is a URL-like representation of a string. For example, the slug
     * for the phrase 'Creme brulée? No, thanks.' would be 'creme-brulee-no-thanks'.
     *
     * @param text the string which will be used to generate the slug.
     */
    static toSlug(text: string) {
        text = text.toLowerCase().trim();
        text = this.removeAccents(text);
        text = this.replaceForeignCharacters(text);
        text = this.removeSpecialCharacters(text, '-');

        return text;
    }

    /**
     * Replace all mapped non-latin unicode characters with their ASCII correspondent.
     *
     * @param text the string to replace characters of.
     */
    static replaceForeignCharacters(text: string) {
        // Break the string into a char array for easier manipulation
        const characters = text.split('');

        for (let i = 0; i < characters.length; i++) {
            // For every character, check if it is a mapped Unicode character
            if (this.isMappedUnicodeCharacter(characters[i])) {
                // If it is, get the associated ASCII character
                characters[i] = this.UNICODE_ASCII_MAP[characters[i]];
            }
        }

        // Join the char array back into a string
        return characters.join('');
    }

    /**
     * Removes accents from Unicode characters.
     *
     * @param text the string of which accents must be removed.
     */
    static removeAccents(text: string) {
        /**
         * NFD Unicode normalization works by splitting accented characters like,
         * say, 'á', into two different characters: 'a' and '´'.
         */
        text = text.normalize('NFD');

        // Removes all accents generated by the previous step, keeping only the letters
        return text.replace(this.UNICODE_ACCENTS_REGEX, '');
    }

    /**
     * Removes every non-word character from a string.
     *
     * @param text the text from which to remove special characters.
     * @param replaceWith (optional) a string to replace the special characters.
     */
    static removeSpecialCharacters(text: string, replaceWith = '') {
        // Perform a replace using the non-word regex
        return text.replace(this.NON_WORD_CHARACTERS_REGEX, replaceWith);
    }

    /**
     * Removes duplicate spaces.
     *
     * @param text the text from which to remove multiples spaces.
     */
    static trim(text: string) {
        // Perform a replace using the multi-space regex
        return text.replace(this.MULTISPACE_REGEX, ' ');
    }

    /**
     * Alias method to test if a given character is a unicode character
     * that has a map to an ASCII character.
     *
     * @param character the caracter to test
     */
    private static isMappedUnicodeCharacter(character: string) {
        // If there's a key that equals the received character, it's mapped
        return this.UNICODE_ASCII_MAP[character] !== undefined;
    }
}
